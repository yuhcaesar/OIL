#include <sys/socket.h>
#include <stdio.h>
#include <sys/un.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <fcntl.h>
#include <sys/epoll.h>

#define PORT 8888
#define BACKLOG 5
#define MAXDATASIZE 1024

#define UNIX_DOMAIN "/tmp/v2x_proxy.sock"

//服务器端线程传递参数结构体
struct	ARG{
	int connfd;
	struct	sockaddr_in	client;
	int position;
};

//本地进程间传递参数结构体
struct localARG
{
	struct	sockaddr_un *caddr;
	int sockfd;
};

int sockfd,connfd;
struct epoll_event events[200];
//process_clientRecv函数中收数据字符数组
char recvbuf[MAXDATASIZE];

//定义线程ID
pthread_t	tidSend;
pthread_t	tidRecv;
pthread_t	tidAnalysis;

//等待套接字数目
int nfds;
int i;

//客户端地址占用的字节数
int clientSize;

//线程参数结构体变量
struct	ARG	*arg;

//定义结点结构体变量
typedef struct	elementNode
{
	int latitude;
	int longitude;
	int heading;
	int speed;
	struct elementNode *next;
}elementNodes;

//定义互斥锁变量
pthread_mutex_t mutexSet;
pthread_mutex_t mutexGet;

//定义结构体头结点
struct elementNode *head;

void *functionRecv(void *arg);
void *functionSend(void *arg);
int setNode(elementNodes *data);
elementNodes* getNode();
void setNonBlocking(int socket);
int initServer(struct sockaddr_in *server);
int createSocket();
void regEvent(int sockfd,struct epoll_event *ev,int epfd);
void epollModule(int sockfd,int epfd,struct	sockaddr_in	client,struct epoll_event *ev);
void process_clientRecv(int connfd,struct sockaddr_in client,int position);
void process_clientSend(int connfd,struct sockaddr_in client);
int initLocalSockfd();
void initLocalServer(struct	sockaddr_un *caddr);
void bindSocket(int localSockfd,struct sockaddr_un *caddr);
void analysisData(int sockfd,struct sockaddr_un *caddr);
void *functionAnalysis(void *localArg);

/*成功返回1，失败返回0*/
//放结点数据函数
int setNode(elementNodes *data)
{
	pthread_mutex_lock(&mutexSet);
	if(data == NULL)
	{
		return 0;
	}
	elementNodes *pointer;
	pointer = head;
	while(pointer->next != NULL)
	{
		pointer = pointer->next;
	}
	pointer->next = data;
	pthread_mutex_unlock(&mutexSet);
	return 1;
}

/*取结点数据函数*/
/*成功返回结构体指针，失败返回NULL*/
elementNodes* getNode()
{
	pthread_mutex_lock(&mutexGet);
	elementNodes *pointer;

	if(head->next != NULL)
	{
		pointer = head->next;
		head->next = pointer->next;
	}
	else
	{
		pthread_mutex_unlock(&mutexGet);
		return NULL;
	}
	pthread_mutex_unlock(&mutexGet);
	return pointer;
}

//将socket设置为非阻塞的模式
void setNonBlocking(int socket)
{
	int ret = fcntl(socket,F_SETFL,fcntl(socket, F_GETFL, 0) | O_NONBLOCK);
	if(ret < 0)
	{
		printf("setNonBlocking error");
	}
	return ;
}

//初始化服务端地址
int initServer(struct sockaddr_in *server)
{
	//设置服务器端网络标识
	server->sin_family = AF_INET;
	//设置服务器端端口号
	server->sin_port = htons(PORT);
	//设置服务器端地址
	server->sin_addr.s_addr = htonl(INADDR_ANY);
	
	bzero(&(server->sin_zero),0);
	return 0;
}

//初始化套接字标识符
int createSocket()
{
	int sockfd;
	//调用socket函数进行初始化
	sockfd = socket(AF_INET,SOCK_STREAM,0);
	if(sockfd == -1)
	{
		printf("creat socket failed");
		exit(1);
	}
	//把用于监听的socket设置为非阻塞的方式
	setNonBlocking(sockfd);
	return sockfd;
}

//注册事件
void regEvent(int sockfd,struct epoll_event *ev,int epfd)
{
	//设置与要处理的事件相关的文件描述符
	ev->data.fd = sockfd;
	//设置要处理的事件类型
	ev->events = EPOLLIN | EPOLLET;
	//注册epoll事件
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,ev);
}

//epoll模型进行监听
void epollModule(int sockfd,int epfd,struct	sockaddr_in	client,struct epoll_event *ev)
{
	while(1)
	{
		//等待epoll事件发生
		nfds = epoll_wait(epfd,events,20,1000);
		printf("%d \n",nfds);

		//处理所发生的所有事件
		for(i = 0; i < nfds; i++)
		{
			//监听事件
			if(events[i].data.fd == sockfd)
			{
				clientSize = sizeof(struct sockaddr_in);
				connfd = accept(events[i].data.fd,(struct sockaddr*)&client,&clientSize);
				if(connfd < 0)
				{
					printf("connfd<0");
					continue;
				}
				setNonBlocking(connfd);
				//设置用于读操作的文件描述符
				ev->data.fd = connfd;
				//设置用于注册的读操作事件
				ev->events = EPOLLIN | EPOLLET;
				//注册ev事件
				epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,ev);
			}

			//读事件
			else if(events[i].events & EPOLLIN)
			{
				int socketRead;
				socketRead = events[i].data.fd;
				if(socketRead < 0)
				{
					continue;
				}
				
				arg = (struct	ARG *)malloc(sizeof(struct	ARG));
				arg->connfd = socketRead;
				arg->position = i;
				memcpy((void *)&arg->client,&client,sizeof(client));

				//线程创建函数成功返回0，出错则返回非0
				if(pthread_create(&tidRecv,NULL,functionRecv,(void *)arg))
				{
					printf("pthread_create error");
					exit(1);
				}
			}
			
			//arg = (struct	ARG *)malloc(sizeof(struct	ARG));
			//arg->connfd = events[i].data.fd;
			//memcpy((void *)&arg->client,&client,sizeof(client));
			//开启线程取数组中的消息，向客户端发送数据
			//pthread_create(&tidSend,NULL,functionSend,(void *)arg);
		}
	}
}

void process_clientRecv(int connfd,struct sockaddr_in client,int position)
{
	int num;
	struct	ARG	*argSend;
	char client_name[MAXDATASIZE];

	printf("you got a connection from %s \n",inet_ntoa(client.sin_addr));

	num = recv(connfd,recvbuf,MAXDATASIZE,0);

	if(num == 0)
	{
		close(connfd);
		events[position].data.fd = -1;
		printf("client disconnected \n");
		return;
	}
	client_name[num-1] = '\0';
	printf("client name is %s\n",recvbuf);

	argSend = (struct	ARG *)malloc(sizeof(struct	ARG));
	argSend->connfd = connfd;
	memcpy((void *)&argSend->client,&client,sizeof(client));
	//开启线程取数组中的消息，向客户端发送数据
	pthread_create(&tidSend,NULL,functionSend,(void *)argSend);

	//close(connfd);
}

void process_clientSend(int connfd,struct sockaddr_in client)
{
	elementNodes *sendNode;
	while(1)
	{
		char sendBuf[5];
		sendNode = getNode();
		if(sendNode == NULL)
		{
			sendBuf[0] = 65;
			sendBuf[1] = 74;
			sendBuf[2] = 89;
			sendBuf[3] = 90;
		}
		else
		{
			sendBuf[0] = sendNode->latitude;
			sendBuf[1] = sendNode->longitude;
			sendBuf[2] = sendNode->heading;
			sendBuf[3] = sendNode->speed;
		}
		send(connfd,sendBuf,sizeof(sendBuf),0);

		free(sendNode);
		sleep(1);
	}
}

//服务端收线程函数
void *functionRecv(void *arg)
{
	struct	ARG *info;
	info = (struct	ARG*)arg;
	process_clientRecv(info->connfd,info->client,info->position);
	free(arg);
	pthread_exit(NULL);
}

//服务端写线程函数
void *functionSend(void *arg)
{
	struct	ARG *info;
	info = (struct	ARG*)arg;
	process_clientSend(info->connfd,info->client);
	free(arg);
	pthread_exit(NULL);
}

//初始化本地套接字标识符
int initLocalSockfd()
{
	int localSockfd;
	localSockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
	if(localSockfd < 0)
	{
		printf("create local socket is error");
		exit(1);
	}
	return localSockfd;
}

//初始化套接字地址
void initLocalServer(struct	sockaddr_un *caddr)
{
	memset(caddr, 0, sizeof(struct sockaddr_un));
	caddr->sun_family = AF_UNIX;
	strcpy(caddr->sun_path, UNIX_DOMAIN);
}

//绑定套接字标识符
void bindSocket(int localSockfd,struct sockaddr_un *caddr)
{
	int bindSockfd;
	struct sockaddr_un localCaddr;

	bindSockfd = bind(localSockfd, ( struct sockaddr * )caddr, sizeof(*caddr));
	if(bindSockfd < 0)
	{
		printf("bind socket error");
		exit(1);
	}
}

//解析数据函数
void analysisData(int sockfd,struct sockaddr_un *caddr)
{
	struct sockaddr_un localCaddr;
	char localBuf[MAXDATASIZE];
	socklen_t socketLength;
	socketLength = sizeof(localCaddr);

	while(1){

		recvfrom(sockfd,localBuf,1024,0,(struct sockaddr*)caddr,socketLength);
	
		int opType;
		int opCode;
		opType = localBuf[4] & 0x0f;
		opCode = localBuf[5];
		if(opType == 1)
		{
			//事件流
		}
		else if(opType == 2)
		{
			//数据流
			if(opCode == 1){
				elementNodes *data;
				data = (elementNodes *)malloc(sizeof(elementNodes));
				data->latitude = localBuf[36];
				data->longitude = localBuf[37];
				data->heading = localBuf[38];
				data->speed = localBuf[39];
				//调用set接口进行
				setNode(data);
			}
		}
		else
		{
			elementNodes *data;
			data = (elementNodes *)malloc(sizeof(elementNodes));
			data->latitude = 36;
			data->longitude = 37;
			data->heading = 38;
			data->speed = 39;
			//调用set接口进行
			setNode(data);
		}
	}
}

void *functionAnalysis(void *localArg)
{
	struct localARG *info;
	info = (struct localARG *)localArg;
	analysisData(info->sockfd,info->caddr);
	free(localArg);
	pthread_exit(NULL);
}

int main()
{
	//线程参数结构体参数
	struct localARG *localArg;

	head = (struct elementNode *)malloc(sizeof(struct elementNode));
	head->next = NULL;

	//本地套接字定义
	int localSockfd;

	struct	sockaddr_in server;
	struct	sockaddr_in	client;
	struct	sockaddr_un caddr;
	
	//epoll句柄
	int epfd;

	//声明epoll_event结构体变量，ev用于注册事件。
	struct epoll_event ev;
	
	//初始化本地套接字地址
	initLocalServer(&caddr);	
	
	//初始化本地套接字
	localSockfd = initLocalSockfd();

	unlink(UNIX_DOMAIN);

	//绑定套接字标识符
	bindSocket(localSockfd,&caddr);
	
	localArg = (struct localARG *)malloc(sizeof(struct localARG));
	localArg->caddr = &caddr;
	localArg->sockfd = localSockfd;

	//线程创建函数成功返回0，出错则返回非0
	if(pthread_create(&tidAnalysis,NULL,functionAnalysis,(void *)localArg))
	{
		printf("pthread_create analysis data error");
		exit(1);
	}

	//生成用于处理accept的epoll专用的文件描述符，指定生成描述符的最大范围为256
	epfd = epoll_create(256);
	
	//初始化套接字标识符
	sockfd = createSocket();
	
	regEvent(sockfd,&ev,epfd);
	
	initServer(&server);

	if(bind(sockfd,(struct	sockaddr *)&server,sizeof(server)) == -1)
	{
		printf("bind error");
		exit(1);
	}

	//开启监听 ，第二个参数是最大监听数
	listen(sockfd,BACKLOG);
	
	//调用epoll模型函数
	epollModule(sockfd,epfd,client,&ev);
	
	close(sockfd);
	return 0;
}



